" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
" set the runtime path to include fzf
set rtp+=~/.fzf

call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" asynchronously run programs
Plugin 'neomake/neomake'

" utils
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rhubarb'
Plugin 'MattesGroeger/vim-bookmarks'
Plugin 'junegunn/fzf'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-eunuch'
Plugin 'pbrisbin/vim-mkdir'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'JamshedVesuna/vim-markdown-preview'

" syntax
Plugin 'vim-syntastic/syntastic'
Plugin 'tpope/vim-rails'
Plugin 'vim-ruby/vim-ruby'
Plugin 'kchmck/vim-coffee-script'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-rake'
Plugin 'isRuslan/vim-es6'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'keith/swift.vim'

call vundle#end()            " required
filetype plugin indent on    " required

" Run NeoMake on read and write operations
autocmd! BufReadPost,BufWritePost * Neomake

let g:neomake_serialize = 1
let g:neomake_serialize_abort_on_error = 1

" Colors and Syntax
syntax on
colorscheme hybrid
set background=dark
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1 " Remove this line if using the default palette.
set guifont=Menlo:h13
set colorcolumn=0

" use fancy cursor
if has('nvim')
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
endif

set nocursorline
set expandtab
set modelines=0
set shiftwidth=2
set clipboard=unnamed
set synmaxcol=128
if !has('nvim')
  set ttyscroll=10
endif
set encoding=utf-8
set tabstop=2
set wrap
set number
set expandtab
set nowritebackup
set noswapfile
set nobackup
set hlsearch
set ignorecase
set smartcase
set showtabline=2
set noshowmode
set noruler
set noshowcmd

" splits
set splitright " open vsplit on the right
set splitbelow " open split below current

" set directory for undofiles
" allows for history after a file has been closed
set undofile
set undodir=~/.vim/undodir

" Tab between buffers
noremap <tab> <c-w><c-w>

" bind ctrl-p to FZF
map <C-p> :FZF <enter>

" Syntastic
" Disable inherited syntastic
let g:syntastic_mode_map = {
  \ "mode": "passive",
  \ "active_filetypes": ["php", "rb"],
  \ "passive_filetypes": ["php.erb"] }

let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_ruby_exec = '~/.rvm/bin/rvm-auto-ruby'

let g:syntastic_php_checkers = ['php', 'phpcs']
let g:syntastic_php_phpcs_args = "--standard=$codesniffer_ruleset --colors --tab-width=4"
let g:syntastic_phpcs_exec = '~/.composer/vendor/bin/phpcs'

let g:syntastic_loc_list_height=5
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" ui colors for statusline
hi TabLine      gui=none ctermfg=242 ctermbg=233 cterm=none
hi TabLineSel   gui=bold ctermfg=14  ctermbg=233 cterm=bold
hi TabLineFill  gui=none ctermfg=242 ctermbg=233 cterm=none
let g:currentmode={
	\ 'n'  : 'Normal',
	\ 'no' : 'N·Operator Pending',
	\ 'v'  : 'Visual',
	\ 'V'  : 'V·Line',
	\ '' : 'V·Block',
	\ 's'  : 'Select',
	\ 'S'  : 'S·Line',
	\ '' : 'S·Block',
	\ 'i'  : 'Insert',
	\ 'R'  : 'Replace',
	\ 'Rv' : 'V·Replace',
	\ 'c'  : 'Command',
	\ 'cv' : 'Vim Ex',
	\ 'ce' : 'Ex',
	\ 'r'  : 'Prompt',
	\ 'rm' : 'More',
	\ 'r?' : 'Confirm',
	\ '!'  : 'Shell',
\}

function! DrawInsertHighlight()
  hi! StatusLine gui=none ctermfg=14 ctermbg=233
endfunction

function! DrawNormalHighlight()
  hi! StatusLine gui=none ctermfg=233 ctermbg=250
endfunction

function! DrawReplaceHighlight()
  hi! StatusLine gui=none ctermfg=1 ctermbg=233
endfunction

function! DrawVisualHighlight()
  hi! StatusLine gui=none ctermfg=11 ctermbg=233
endfunction

" change statusline background color for modes
function! ChangeStatuslineColors()
  if (mode() =~# '\v(n|no)')
    call DrawNormalHighlight()
  elseif (mode() =~# '\v(v|V|^V)' || g:currentmode[mode()] ==# 'V·Block')
    call DrawVisualHighlight()
  elseif (mode() ==# 'i')
    call DrawInsertHighlight()
  elseif (mode() =~# '\v(R|Rv)' || g:currentmode[mode()] ==# 'V·Replace')
    call DrawReplaceHighlight()
  else
    call DrawNormalHighlight()
  endif

  return ''
endfunction

" Formats the statusline
let &stl  = ''
let &stl .= '%{ChangeStatuslineColors()}'
let &stl .= '[%{toupper(mode())}]'
let &stl .= ' '      " Separator
let &stl .= '%f'     " file name
let &stl .= '%m'     " modified flag
let &stl .= '%r'     " read only flag

" Git info
let &stl .= ' '
let &stl .= '%{fugitive#statusline()} '   " Buffer's Git info

" Puts in syntastic warnings
let &stl .= '%#warningmsg#'
let &stl .= '%{SyntasticStatuslineFlag()}'
let &stl .=  '%*'

if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif
