" set the runtime path to include fzf
set rtp+=~/.fzf

call plug#begin('~/.local/share/nvim/plugged')

" ----------------
" Plugins
" ----------------

" Utilities
" inline git status
Plug 'airblade/vim-gitgutter'
" Git for vim
Plug 'tpope/vim-fugitive'
" Github gist
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'
" Gbrowse for files or lines
Plug 'tpope/vim-rhubarb'
" Bookmark lines
Plug 'MattesGroeger/vim-bookmarks'
" FZF file search
Plug 'junegunn/fzf'
" comment files with keyboard shortcuts
Plug 'tpope/vim-commentary'
" UNIX file commands
Plug 'tpope/vim-eunuch'
" :e any/non/existant/path.txt to create it
Plug 'pbrisbin/vim-mkdir'
" recognize .editorconfig files
Plug 'editorconfig/editorconfig-vim'
" Linter for all the things
Plug 'w0rp/ale'
" Rake in vim
Plug 'tpope/vim-rake'
" Rails commands and rails-specific syntax
Plug 'tpope/vim-rails'
" auto-add 'end' and 'endif'
Plug 'tpope/vim-endwise'
" Ruby syntax
Plug 'vim-ruby/vim-ruby'
" CoffeeScript syntax
Plug 'kchmck/vim-coffee-script'
" ES6 syntax and snippets
Plug 'isRuslan/vim-es6'
" Slim
Plug 'slim-template/vim-slim'
" Crystal
Plug 'rhysd/vim-crystal'
" VIML tests
Plug 'junegunn/vader.vim'
" Distraction free mode
Plug 'junegunn/goyo.vim'
" Show me the whitespace
Plug 'ntpeters/vim-better-whitespace'
" Golang
Plug 'fatih/vim-go'
" autoclose braces, brackets, etc
Plug 'Townk/vim-autoclose'
" alignment
Plug 'junegunn/vim-easy-align'

Plug 'ekalinin/Dockerfile.vim'


" -------------
" Color Pallete
" -------------
Plug 'w0ng/vim-hybrid'

" Initialize plugin system
call plug#end()

filetype plugin indent on    " required

" Colors and Syntax
syntax on
if (has("termguicolors"))
  set termguicolors
endif
colorscheme hybrid
set background=dark
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1 " Remove this line if using the default palette.
set guifont=Fira:h13
set colorcolumn=0

" use fancy cursor
if has('nvim')
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
endif

:set tags=./tags;

" Syntax for files
autocmd BufNewFile,BufRead Jenkinsfile set filetype=groovy
autocmd BufNewFile,BufRead Jenkinsfile set syntax=groovy
autocmd BufNewFile,BufRead *.pp set filetype=ruby
autocmd BufNewFile,BufRead *.pp set syntax=ruby

set updatetime=500
set nocursorline
set expandtab
set backspace=2
set modelines=0
set shiftwidth=2
set clipboard=unnamed
set synmaxcol=0
if !has('nvim')
  set ttyscroll=10
endif
set encoding=utf-8
set tabstop=2
set wrap
set number
set expandtab
set nowritebackup
set noswapfile
set nobackup
set hlsearch
set ignorecase
set smartcase
set showtabline=2
set noshowmode
set noruler
set noshowcmd
set hidden

" splits
set splitright " open vsplit on the right
set splitbelow " open split below current

" set directory for undofiles
" allows for history after a file has been closed
set undofile
set undodir=~/.vim/undodir

" Tab between buffers
noremap <tab> <c-w><c-w>

nmap <C-]> :tabnext<CR>
nmap <C-[> :tabprevious<CR>
nunmap <Esc>

" bind ctrl-p to FZF
map <C-p> :FZF <enter>

" Remove Ex mode
map Q <Nop>

" Linters
let g:ale_php_phpcs_standard = $codesniffer_ruleset
" open error loclist
let g:ale_open_list = 1
" Dont check as text is changed
let g:ale_lint_on_text_changed = 0
" Dont run on enter
let g:ale_lint_on_enter = 0

let g:ale_linters = {
\   'html': [],
\   'php': ['php', 'phpcs'],
\}

" ui colors for statusline
hi TabLine      gui=none ctermfg=242 ctermbg=233 cterm=none
hi TabLineSel   gui=bold ctermfg=14  ctermbg=233 cterm=bold
hi TabLineFill  gui=none ctermfg=242 ctermbg=233 cterm=none
let g:currentmode={
	\ 'n'  : 'Normal',
	\ 'no' : 'N·Operator Pending',
	\ 'v'  : 'Visual',
	\ 'V'  : 'V·Line',
	\ '' : 'V·Block',
	\ 's'  : 'Select',
	\ 'S'  : 'S·Line',
	\ '' : 'S·Block',
	\ 'i'  : 'Insert',
	\ 'R'  : 'Replace',
	\ 'Rv' : 'V·Replace',
	\ 'c'  : 'Command',
	\ 'cv' : 'Vim Ex',
	\ 'ce' : 'Ex',
	\ 'r'  : 'Prompt',
	\ 'rm' : 'More',
	\ 'r?' : 'Confirm',
	\ '!'  : 'Shell',
  \ 't'  : ''
\}

function! DrawInsertHighlight()
  hi! statusline gui=none ctermfg=14 ctermbg=233
endfunction

function! DrawNormalHighlight()
  hi! statusline gui=none ctermfg=233 ctermbg=250
endfunction

function! DrawReplaceHighlight()
  hi! statusline gui=none ctermfg=1 ctermbg=233
endfunction

function! DrawVisualHighlight()
  hi! statusline gui=none ctermfg=11 ctermbg=233
endfunction

" change statusline background color for modes
function! ChangeStatuslineColors()
  if (mode() =~# '\v(n|no)')
    call DrawNormalHighlight()
  elseif (mode() =~# '\v(v|V|^V)' || g:currentmode[mode()] ==# 'V·Block')
    call DrawVisualHighlight()
  elseif (mode() ==# 'i')
    call DrawInsertHighlight()
  elseif (mode() =~# '\v(R|Rv)' || g:currentmode[mode()] ==# 'V·Replace')
    call DrawReplaceHighlight()
  else
    call DrawNormalHighlight()
  endif

  return ''
endfunction

" Formats the statusline
let &stl  = ''
let &stl .= '%{ChangeStatuslineColors()}'
let &stl .= '[%{toupper(mode())}]'
let &stl .= ' '      " Separator
let &stl .= '%f'     " file name
let &stl .= '%m'     " modified flag
let &stl .= '%r'     " read only flag

" Git info
let &stl .= ' '
let &stl .= '%{fugitive#statusline()} '   " Buffer's Git info

" Linter info
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction

let &stl.= '%#warningmsg#'
let &stl .= " %{LinterStatus()} "
let &stl .= '%*'

if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif

set mouse=a
