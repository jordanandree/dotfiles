" --- Plugins
call plug#begin()
Plug 'sainnhe/everforest'     " Color theme
Plug 'junegunn/fzf.vim'       " Fuzzy file search for buffer navigation
Plug 'itchyny/lightline.vim'  " Status line theme
Plug 'itchyny/vim-gitbranch'  " Git branch in status line
Plug 'airblade/vim-gitgutter' " Git changes in gutter
Plug 'sunjon/shade.nvim'      " Fade inactive windows / splits
Plug 'neovim/nvim-lspconfig'  " LSP Config
Plug 'ms-jpq/coq_nvim', {'branch': 'coq'}
Plug 'ms-jpq/coq.artifacts', {'branch': 'artifacts'}
Plug 'nvim-tree/nvim-web-devicons' " optional, for file icons
Plug 'nvim-tree/nvim-tree.lua'

" --- Syntax: TS/JS
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

" --- Syntax: GraphQL
Plug 'jparise/vim-graphql'
call plug#end()

" --- Global Settings
set clipboard=unnamed
set encoding=utf-8
set tabstop=2
set shiftwidth=2
set wrap
set number
set expandtab
set signcolumn=yes
set cursorline
set undofile
set nowritebackup
set noswapfile
set nobackup
set undodir=~/.vim/undodir

" --- Splits
set splitright " open vsplit on the right
set splitbelow " open split below current

" --- Status Line
set laststatus=2
set noshowmode
let g:lightline = {
	\ 'colorscheme': 'one',
  \ 'active': {
  \   'left':  [ ['mode', 'paste'],
  \              ['gitbranch', 'readonly', 'relativepath', 'modified'] ],
  \   'right': [ [ 'lineinfo' ],
  \              [ 'filetype' ] ],
  \ 'component_function': {
  \   'gitbranch': 'gitbranch#name'
  \ },
  \ },
	\ }
if !has('gui_running')
  set t_Co=256
endif

" --- FZF
" Set the runtime path to include fzf
set rtp+=/usr/local/opt/fzf
let g:fzf_preview_window = ''
" Tab between buffers
noremap <tab> <c-w><c-w>
noremap <S-tab> <c-w><S-w>
" User FZF for buffer navigation
nnoremap <silent> <leader>b :Buffers<CR>
" bind ctrl-p to FZF File browsers
map <C-p> :Files <enter>

" --- Colors and Theme
syntax on
filetype plugin indent on
if has('termguicolors')
  set termguicolors
endif
colorscheme everforest
set guifont="IBM Plex Mono":h13
let g:everforest_background = 'hard'

" Dim inactive windows
lua <<EOF
require'shade'.setup{}
EOF

" --- File sidebar
lua <<EOF
-- disable netrw at the very start of your init.lua (strongly advised)
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1

require("nvim-tree").setup({
  view = {
      adaptive_size = true,
  }
})
EOF

" --- LSP
lua <<EOF
-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  -- vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local bufopts = { noremap=true, silent=true, buffer=bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  vim.keymap.set('n', '<space>wl', function()
    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
  end, bufopts)
  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', '<space>f', function() vim.lsp.buf.format { async = true } end, bufopts)
end

local lsp = require 'lspconfig'

-- Completions
local coq = require 'coq'

vim.g.coq_settings = {
  auto_start = true,
}

vim.api.nvim_command [[ COQnow --shut-up ]]

-- TypeScript
lsp.tsserver.setup(coq.lsp_ensure_capabilities {
  on_attach = on_attach,
})

-- ESLint
local util = require 'lspconfig.util'
lsp.eslint.setup(coq.lsp_ensure_capabilities {
    on_attach = on_attach,
    root_dir = util.find_package_json_ancestor,
    settings = {
        codeActionOnSave = {
            enable = true,
            mode = "all"
        },
    }
})

-- JSON
lsp.jsonls.setup{}

-- YAML
lsp.yamlls.setup{}

EOF

autocmd BufWritePre *.tsx,*.ts,*.jsx,*.js EslintFixAll

" --- Local overrides
if filereadable(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif
